DateTimeField – Django Models



 **DateTimeField** is a date and time field which stores date, represented in
Python by a datetime.datetime instance. As the name suggests, this field is
used to store an object of datetime created in python. The default form widget
for this field is a TextInput. The admin uses two separate TextInput
widgets with JavaScript shortcuts.

 **Syntax**

    
    
    field_name = models.DateTimeField(**options)

##### DateTimeField has the following extra optional arguments –

  * #### DateTimeField.auto_now

Automatically set the field to now every time the object is saved. Useful for
“last-modified” timestamps. Note that the current date is always used; it’s
not just a default value that you can override.  
The field is only automatically updated when calling Model.save(). The field
isn’t updated when making updates to other fields in other ways such as
QuerySet.update(), though you can specify a custom value for the field in an
update like that.

  * #### DateTimeField.auto_now_add

Automatically set the field to now when the object is first created. Useful
for creation of timestamps. Note that the current date is always used; it’s
not just a default value that you can override. So even if you set a value for
this field when creating the object, it will be ignored. If you want to be
able to modify this field, set the following instead of auto_now_add=True:

    * For **DateTimeField: default=datetime.now** – from datetime.now()
    * For **DateTimeField: default=timezone.now** – from django.utils.timezone.now()

 **Note** : The options auto_now_add, auto_now, and default are mutually
exclusive. Any combination of these options will result in an error.

## Django Model DateTimeField Explanation

Illustration of DateTimeField using an Example. Consider a project named
geeksforgeeks having an app named geeks.

  

  

> Refer to the following articles to check how to create a project and an app
> in Django.
>
>   * How to Create a Basic Project using MVT in Django?
>   * How to Create an App in Django ?
>

Enter the following code into models.py file of **geeks** app.

 __

 __  
 __

 __

 __  
 __  
 __

from django.db import models

from django.db.models import Model

# Create your models here.

 

class GeeksModel(Model):

 geeks_field = models.DateTimeField()  
  
---  
  
 __

 __

Add the geeks app toINSTALLED_APPS

 __

 __  
 __

 __

 __  
 __  
 __

# Application definition

 

INSTALLED_APPS = [

 'django.contrib.admin',

 'django.contrib.auth',

 'django.contrib.contenttypes',

 'django.contrib.sessions',

 'django.contrib.messages',

 'django.contrib.staticfiles',

 'geeks',

]  
  
---  
  
 __

 __

Now when we runmakemigrations command from the terminal,

    
    
    Python manage.py makemigrations

A new folder named migrations would be created in geeks directory with a
file named 0001_initial.py

 __

 __  
 __

 __

 __  
 __  
 __

# Generated by Django 2.2.5 on 2019-09-25 06:00

 

from django.db import migrations, models

 

class Migration(migrations.Migration):

 

 initial = True

 

 dependencies = [

 ]

 

 operations = [

 migrations.CreateModel(

 name ='GeeksModel',

 fields =[

 ('id', 

 models.AutoField(

 auto_created = True,

 primary_key = True,

 serialize = False, 

 verbose_name ='ID'

 )),

 ('geeks_field', models.DateTimeField()),

 ],

 ),

 ]  
  
---  
  
 __

 __

Now run,

    
    
    Python manage.py migrate

Thus, an geeks_field **DateTimeField** is created when you run migrations on
the project. It is a field to store datetime.datetime python object.

## How to use DateTimeField ?

DateTimeField is used for storing python datetime.datetime instance in the
database. One can store any type of date and time using the same in the
database. Let’s try storing a date in model created above.

 __

 __  
 __

 __

 __  
 __  
 __

# importing the model

# from geeks app

from geeks.models import GeeksModel

 

# importing datetime module

import datetime

 

# creating an instance of 

# datetime.date

d = datetime(2015, 10, 09, 23, 55, 59,
342380)

 

# creating an instance of 

# GeeksModel

geek_object = GeeksModel.objects.create(geeks_field = d)

geek_object.save()  
  
---  
  
 __

 __

Now let’s check it in admin server. We have created an instance of GeeksModel.  
![DateTimeField django models](https://media.geeksforgeeks.org/wp-
content/uploads/20191005134307/binaryfield-django-models-1024x258.png)

## Field Options

Field Options are the arguments given to each field for applying some
constraint or imparting a particular characteristic to a particular Field. For
example, adding an argument null = True to DateTimeField will enable it to
store empty values for that table in relational database.  
Here are the field options and attributes that an DateTimeField can use.

Field Options| Description| Null| If **True** , Django will store empty values
as **NULL** in the database. Default is **False**.| Blank| If **True** , the
field is allowed to be blank. Default is **False**.| db_column| The name of
the database column to use for this field. If this isn’t given, Django will
use the field’s name.| Default| The default value for the field. This can be a
value or a callable object. If callable it will be called every time a new
object is created.| help_text| Extra “help” text to be displayed with the form
widget. It’s useful for documentation even if your field isn’t used on a
form.| primary_key| If True, this field is the primary key for the model.|
editable| If **False** , the field will not be displayed in the admin or any
other ModelForm. They are also skipped during model validation. Default is
**True**.| error_messages| The error_messages argument lets you override the
default messages that the field will raise. Pass in a dictionary with keys
matching the error messages you want to override.| help_text| Extra “help”
text to be displayed with the form widget. It’s useful for documentation even
if your field isn’t used on a form.| verbose_name| A human-readable name for
the field. If the verbose name isn’t given, Django will automatically create
it using the field’s attribute name, converting underscores to spaces.|
validators| A list of validators to run for this field. See the validators
documentation for more information.| Unique| If True, this field must be
unique throughout the table.  
---|---  
  
Attention geek! Strengthen your foundations with the **Python Programming
Foundation** Course and learn the basics.

To begin with, your interview preparations Enhance your Data Structures
concepts with the **Python DS** Course.

My Personal Notes _arrow_drop_up_

Save

