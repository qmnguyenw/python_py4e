Data Analysis and Visualization with Python | Set 2



Prerequisites : NumPy in Python, Data Analysis Visualization with Python | Set
1

 **1\. Storing DataFrame in CSV Format :**

 **Pandas** provide **to.csv('filename', index = "False|True")** function to
write DataFrame into a CSV file. Here _filename_ is the name of the CSV file
that you want to create and _index_ tells that index (if Default) of
DataFrame should be overwritten or not. If we set **index = False** then the
index is not overwritten. By Default value of index is **TRUE** then index
is overwritten.

 **Example :**

 __

 __  
 __

 __

 __  
 __  
 __

import pandas as pd

 

# assigning three series to s1, s2, s3

s1 = pd.Series([0, 4, 8])

s2 = pd.Series([1, 5, 9])

s3 = pd.Series([2, 6, 10])

 

# taking index and column values

dframe = pd.DataFrame([s1, s2, s3])

 

# assign column name

dframe.columns =['Geeks', 'For', 'Geeks']

 

# write data to csv file

dframe.to_csv('geeksforgeeks.csv', index = False) 

dframe.to_csv('geeksforgeeks1.csv', index = True)  
  
---  
  
 __

 __

Output :

  

  

    
    
    geeksforgeeks1.csv
    ![](https://media.geeksforgeeks.org/wp-content/uploads/indexfalse-300x189.png)
    
    geeksforgeeks2.csv
    ![](https://media.geeksforgeeks.org/wp-content/uploads/indextrue-300x217.png)
    

**2\. Handling Missing Data**

The Data Analysis Phase also comprises of the ability to handle the missing
data from our dataset, and not so surprisingly Pandas live up to that
expectation as well. This is where dropna and/or fillna methods comes into
the play. While dealing with the missing data, you as a Data Analyst are
either supposed to drop the column containing the **NaN values** (dropna
method) or fill in the missing data with mean or mode of the whole column
entry (fillna method), this decision is of great significance and depends upon
the data and the affect would create in our results.

  *  **Drop the missing Data :**  
Consider this is the DataFrame generated by below code :  
![](https://media.geeksforgeeks.org/wp-content/uploads/inputdframe.png)

 __

 __  
 __

 __

 __  
 __  
 __

import pandas as pd

 

# Create a DataFrame

dframe = pd.DataFrame({'Geeks': [23, 24, 22], 

 'For': [10, 12, np.nan],

 'geeks': [0, np.nan, np.nan]},

 columns =['Geeks', 'For', 'geeks'])

 

# This will remove all the

# rows with NAN values

 

# If axis is not defined then

# it is along rows i.e. axis = 0

dframe.dropna(inplace = True)

print(dframe)

 

# if axis is equal to 1

dframe.dropna(axis = 1, inplace = True)

 

print(dframe)  
  
---  
  
 __

 __

Output :

    
    
    axis=0
    ![](https://media.geeksforgeeks.org/wp-content/uploads/dropna.png) 
    
    axis=1
    ![](https://media.geeksforgeeks.org/wp-content/uploads/dronaaxis.png)

  * **Fill the missing values :**  
Now, to replace any **NaN** value with mean or mode of the data, fillna is
used, which could replace all the NaN values from a particular column or even
in whole **DataFrame** as per the requirement.

 __

 __  
 __

 __

 __  
 __  
 __

import numpy as np

import pandas as pd

 

# Create a DataFrame

dframe = pd.DataFrame({'Geeks': [23, 24, 22], 

 'For': [10, 12, np.nan],

 'geeks': [0, np.nan, np.nan]},

 columns = ['Geeks', 'For', 'geeks'])

 

# Use fillna of complete Dataframe 

 

# value function will be applied on every column

dframe.fillna(value = dframe.mean(), inplace = True)

print(dframe)

 

# filling value of one column

dframe['For'].fillna(value = dframe['For'].mean(),

 inplace = True)

print(dframe)  
  
---  
  
 __

 __

Output :

  

  

    
    
    ![](https://media.geeksforgeeks.org/wp-content/uploads/1-67.png)![](https://media.geeksforgeeks.org/wp-content/uploads/2-44.png)

**3\. Groupby Method (Aggregation) :**

The groupby method allows us to group together the data based off any row or
column, thus we can further apply the aggregate functions to analyze our data.
Group series using mapper (dict or key function, apply given function to
group, return result as series) or by a series of columns.

Consider this is the DataFrame generated by below code :  
![](https://media.geeksforgeeks.org/wp-content/uploads/1-68-243x300.png)

 __

 __  
 __

 __

 __  
 __  
 __

import pandas as pd

import numpy as np

 

# create DataFrame

dframe = pd.DataFrame({'Geeks': [23, 24, 22, 22,
23, 24], 

 'For': [10, 12, 13, 14, 15, 16],

 'geeks': [122, 142, 112, 122, 114, 112]},

 columns = ['Geeks', 'For', 'geeks']) 

 

# Apply groupby and aggregate function

# max to find max value of column 

 

# &quot;For&quot; and column &quot;geeks&quot; for every

# different value of column &quot;Geeks&quot;.

 

print(dframe.groupby(['Geeks']).max())  
  
---  
  
 __

 __

Output :

    
    
    ![](https://media.geeksforgeeks.org/wp-content/uploads/1-69.png)
    

Attention geek! Strengthen your foundations with the **Python Programming
Foundation** Course and learn the basics.

To begin with, your interview preparations Enhance your Data Structures
concepts with the **Python DS** Course.

My Personal Notes _arrow_drop_up_

Save

