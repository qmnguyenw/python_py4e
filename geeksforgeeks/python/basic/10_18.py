EmailField – Django Models



EmailField is a CharField that checks the value for a valid email address
using EmailValidator. **EmailValidator** validates a email through predefined
regex which checks ‘@’ and a ‘.’ defined after it. One can change the regex by
exploring options from EmailValidator itself.

 **Syntax**

    
    
    field_name = models.EmailField(max_length=254, **options)

 **EmailField has one extra required argument:**

    
    
    EmailField.max_length

The maximum length (in characters) of the field. The max_length is enforced
at the database level and in Django’s validation using MaxLengthValidator.

## Django Model EmailField Explanation

Illustration of EmailField using an Example. Consider a project named
geeksforgeeks having an app named geeks.

  

  

> Refer to the following articles to check how to create a project and an app
> in Django.
>
>   * How to Create a Basic Project using MVT in Django?
>   * How to Create an App in Django ?
>

Enter the following code into models.py file of **geeks** app.

 __

 __  
 __

 __

 __  
 __  
 __

from django.db import models

from django.db.models import Model

# Create your models here.

 

class GeeksModel(Model):

 geeks_field = models.EmailField(max_length = 254)  
  
---  
  
 __

 __

Add the geeks app toINSTALLED_APPS

 __

 __  
 __

 __

 __  
 __  
 __

# Application definition

 

INSTALLED_APPS = [

 'django.contrib.admin',

 'django.contrib.auth',

 'django.contrib.contenttypes',

 'django.contrib.sessions',

 'django.contrib.messages',

 'django.contrib.staticfiles',

 'geeks',

]  
  
---  
  
 __

 __

Now when we runmakemigrations command from the terminal,

    
    
    Python manage.py makemigrations

A new folder named migrations would be created in geeks directory with a
file named 0001_initial.py

 __

 __  
 __

 __

 __  
 __  
 __

# Generated by Django 2.2.5 on 2019-09-25 06:00

 

from django.db import migrations, models

 

class Migration(migrations.Migration):

 

 initial = True

 

 dependencies = [

 ]

 

 operations = [

 migrations.CreateModel(

 name ='GeeksModel',

 fields =[

 ('id', 

 models.AutoField(

 auto_created = True,

 primary_key = True,

 serialize = False, 

 verbose_name ='ID'

 )),

 ('geeks_field', models.EmailField( max_length = 254 )),

 ],

 ),

 ]  
  
---  
  
 __

 __

Now run,

    
    
    Python manage.py migrate

Thus, an geeks_field **EmailField** is created when you run migrations on
the project. It is a field to store email address in database.

## How to use EmailField ?

EmailField is used for storing an email address in the database. One can store
email id form any domain. Let’s try storing an email id instance in model
created above.

 __

 __  
 __

 __

 __  
 __  
 __

# importing the model

# from geeks app

from geeks.models import GeeksModel

 

# creating a string

d = "abc@gmail.com"

 

# creating an instance of 

# GeeksModel

geek_object = GeeksModel.objects.create(geeks_field = d)

geek_object.save()  
  
---  
  
 __

 __

Now let’s check it in admin server. We have created an instance of GeeksModel.  
![EmailField django models](https://media.geeksforgeeks.org/wp-
content/uploads/20191005134307/binaryfield-django-models-1024x258.png)

## Field Options

Field Options are the arguments given to each field for applying some
constraint or imparting a particular characteristic to a particular Field. For
example, adding an argument null = True to EmailField will enable it to
store empty values for that table in relational database.  
Here are the field options and attributes that a EmailField can use.

Field Options| Description| Null| If **True** , Django will store empty values
as **NULL** in the database. Default is **False**.| Blank| If **True** , the
field is allowed to be blank. Default is **False**.| db_column| The name of
the database column to use for this field. If this isn’t given, Django will
use the field’s name.| Default| The default value for the field. This can be a
value or a callable object. If callable it will be called every time a new
object is created.| help_text| Extra “help” text to be displayed with the form
widget. It’s useful for documentation even if your field isn’t used on a
form.| primary_key| If True, this field is the primary key for the model.|
editable| If **False** , the field will not be displayed in the admin or any
other ModelForm. They are also skipped during model validation. Default is
**True**.| error_messages| The error_messages argument lets you override the
default messages that the field will raise. Pass in a dictionary with keys
matching the error messages you want to override.| help_text| Extra “help”
text to be displayed with the form widget. It’s useful for documentation even
if your field isn’t used on a form.| verbose_name| A human-readable name for
the field. If the verbose name isn’t given, Django will automatically create
it using the field’s attribute name, converting underscores to spaces.|
validators| A list of validators to run for this field. See the validators
documentation for more information.| Unique| If True, this field must be
unique throughout the table.  
---|---  
  
Attention geek! Strengthen your foundations with the **Python Programming
Foundation** Course and learn the basics.

To begin with, your interview preparations Enhance your Data Structures
concepts with the **Python DS** Course.

My Personal Notes _arrow_drop_up_

Save

