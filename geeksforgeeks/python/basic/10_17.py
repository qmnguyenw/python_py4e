BinaryField – Django Models



BinaryField is a special field to store **raw binary data**. It can be
assigned bytes, bytearray, or memoryview. By default, BinaryField sets
**editable** to **False** , that is it can’t be included in a ModelForm. Since
BinaryField stores raw data or in other terms a python object, it can not be
manually entered and needs to be assigned through a view or django shell. This
is what **editable to False** means, that is it can’t be edited through any
form.

 **Syntax**

    
    
    field_name = models.BinaryField(**options)

## Django Model BinaryField Explanation

Illustration of BinaryField using an Example. Consider a project named
geeksforgeeks having an app named geeks.

> Refer to the following articles to check how to create a project and an app
> in Django.
>
>   * How to Create a Basic Project using MVT in Django?
>   * How to Create an App in Django ?
>

Enter the following code into models.py file of **geeks** app.

  

  

 __

 __  
 __

 __

 __  
 __  
 __

from django.db import models

from django.db.models import Model

# Create your models here.

 

class GeeksModel(Model):

 geeks_field = models.BinaryField()  
  
---  
  
 __

 __

Add the geeks app toINSTALLED_APPS

 __

 __  
 __

 __

 __  
 __  
 __

# Application definition

 

INSTALLED_APPS = [

 'django.contrib.admin',

 'django.contrib.auth',

 'django.contrib.contenttypes',

 'django.contrib.sessions',

 'django.contrib.messages',

 'django.contrib.staticfiles',

 'geeks',

]  
  
---  
  
 __

 __

Now when we runmakemigrations command from the terminal,

    
    
    Python manage.py makemigrations

A new folder named migrations would be created in geeks directory with a
file named 0001_initial.py

 __

 __  
 __

 __

 __  
 __  
 __

# Generated by Django 2.2.5 on 2019-09-25 06:00

 

from django.db import migrations, models

 

class Migration(migrations.Migration):

 

 initial = True

 

 dependencies = [

 ]

 

 operations = [

 migrations.CreateModel(

 name ='GeeksModel',

 fields =[

 ('id', 

 models.AutoField(auto_created = True,

 primary_key = True,

 serialize = False, 

 verbose_name ='ID'

 )),

 ('geeks_field', models.BinaryField()),

 ],

 ),

 ]  
  
---  
  
 __

 __

Thus, an geeks_field **BigIntegerField** is created when you run
makemigrations on the project.It is a field to store raw binary data.

## How to use BinaryField ?

Any type of data can be converted into bytes including integers, srings,
images, etc. Let’s try to save a string into the BinaryField. String can be
converted to bytes using the generic bytes function. This function internally
points to CPython Library which implicitly calls the encode function for
converting the string to specified encoding.

 __

 __  
 __

 __

 __  
 __  
 __

# importing the model

# from geeks app

from geeks.models import GeeksModel

 

# creating a string

test_string = "GFG is best"

 

# creating a bytes object

res = bytes(test_string, 'utf-8')

 

# creating a instance of 

# GeeksModel

geek_object = GeeksModel.objects.create(geeks_field = res)

geek_object.save()  
  
---  
  
 __

 __

Now let’s check it in admin server. We have created an instance of GeeksModel  
![binaryfield-django-models](https://media.geeksforgeeks.org/wp-
content/uploads/20191005134307/binaryfield-django-models-1024x258.png)  
 **Possible errors**

As specified, BinaryField is a non-editable field, if you manually try to make
it editable using editable=True it will create unexpected errors. It should
be created in a function so that objects can be allocated to it.

![binaryfield-editable-django-models](https://media.geeksforgeeks.org/wp-
content/uploads/20191005130550/binaryfield-editable-django-models.png)

## Field Options

Field Options are the arguments given to each field for applying some
constraint or imparting a particular characteristic to a particular Field. For
example, adding an argument null = True to BinaryField will enable it to
store empty values for that table in relational database.  
Here are the option and attributes that an BinaryField can use.

Field Options| Description| Null| If **True** , Django will store empty values
as **NULL** in the database. Default is **False**.| Blank| If **True** , the
field is allowed to be blank. Default is **False**.| db_column| The name of
the database column to use for this field. If this isn’t given, Django will
use the field’s name.| Default| The default value for the field. This can be a
value or a callable object. If callable it will be called every time a new
object is created.| help_text| Extra “help” text to be displayed with the form
widget. It’s useful for documentation even if your field isn’t used on a
form.| primary_key| If True, this field is the primary key for the model.|
editable| If **False** , the field will not be displayed in the admin or any
other ModelForm. They are also skipped during model validation. Default is
**True**.| error_messages| The error_messages argument lets you override the
default messages that the field will raise. Pass in a dictionary with keys
matching the error messages you want to override.| help_text| Extra “help”
text to be displayed with the form widget. It’s useful for documentation even
if your field isn’t used on a form.| verbose_name| A human-readable name for
the field. If the verbose name isn’t given, Django will automatically create
it using the field’s attribute name, converting underscores to spaces.|
validators| A list of validators to run for this field. See the validators
documentation for more information.| Unique| If True, this field must be
unique throughout the table.  
---|---  
  
Attention geek! Strengthen your foundations with the **Python Programming
Foundation** Course and learn the basics.

To begin with, your interview preparations Enhance your Data Structures
concepts with the **Python DS** Course.

My Personal Notes _arrow_drop_up_

Save

